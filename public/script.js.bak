// collectibles-prod/public/script.js
function showSection(sectionId) {
  document.querySelectorAll('.section').forEach(section => {
    section.style.display = section.id === sectionId ? 'block' : 'none';
  });
}

function updateTransactionDate() {
  const today = new Date().toISOString().split('T')[0];
  document.getElementById('current-date').textContent = today;
  document.getElementById('transaction-date').value = today;
}

document.querySelector('a[href="#"][onclick="showSection(\'add-transaction\')"]').addEventListener('click', () => {
  showSection('add-transaction');
  updateTransactionDate();
});

document.addEventListener('DOMContentLoaded', () => {
  showSection('add-item');
  updateTransactionDate()
  // Global error handler for uncaught errors
  window.onerror = (msg, url, lineNo, columnNo, error) => {
    console.error('Global error:', { msg, url, lineNo, columnNo, error });
    return false;
  };
});

document.getElementById('item-form').addEventListener('submit', async (e) => {
  e.preventDefault();
  const formData = new FormData(e.target);
  const item = Object.fromEntries(formData);
  
  const categoryAttributes = {
    "Pokémon": { platform: "set", region: "series" },
    "Video Games": { platform: "platform", region: "region" },
    "Comics": { platform: "title", region: "issue" },
    "Football Jerseys": { platform: "team", region: "season" },
    "GAA Jerseys": { platform: "county", region: "year" },
    "Coins": { platform: "denomination", region: "year" },
    "Video Game Consoles": { platform: "model", region: "region" },
    "Electronics": { platform: "type", region: "brand" },
    "Other TCGs": { platform: "game", region: "set" },
    "Sports Cards": { platform: "sport", region: "player" }
  };

  const attrMap = categoryAttributes[item.category];
  item.attributes = {
    [attrMap.platform]: item.platform,
    [attrMap.region]: item.region
  };
  
  item.condition_history = [{ type: item.condition, date: new Date().toISOString() }];
  
  delete item.platform;
  delete item.region;

  try {
    const res = await fetch('/items', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(item)
    });
    const data = await res.json();
    if (res.ok) {
      Swal.fire('Success', `Added item: ${data.id}`, 'success');
      e.target.reset();
    } else {
      Swal.fire('Error', data.error, 'error');
    }
  } catch (err) {
    Swal.fire('Error', err.message, 'error');
  }
});

document.getElementById('bulk-upload-form').addEventListener('submit', async (e) => {
  e.preventDefault();
  const formData = new FormData(e.target);
  try {
    const res = await fetch('/items/bulk', {
      method: 'POST',
      body: formData
    });
    const data = await res.json();
    if (res.ok) {
      Swal.fire('Success', data.message, 'success');
    } else {
      Swal.fire('Error', JSON.stringify(data.errors), 'error');
    }
  } catch (err) {
    Swal.fire('Error', err.message, 'error');
  }
});

document.getElementById('transaction-form').addEventListener('submit', async (e) => {
  e.preventDefault();
  const formData = new FormData(e.target);
  const tx = Object.fromEntries(formData);
  tx.items = [{ item_id: parseInt(tx.item_id), price: parseFloat(tx.price), direction: 'Out' }];
  delete tx.item_id;
  delete tx.price;

  try {
    const res = await fetch('/transactions', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(tx)
    });
    const data = await res.json();
    if (res.ok) {
      Swal.fire('Success', `Added transaction: ${data.tx_id}`, 'success');
    } else {
      Swal.fire('Error', data.error, 'error');
    }
  } catch (err) {
    Swal.fire('Error', err.message, 'error');
  }
});

async function fetchProfitReport() {
  try {
    const res = await fetch('/profit-report');
    const data = await res.json();
    const tbody = document.querySelector('#profit-table tbody');
    tbody.innerHTML = '';
    data.forEach(row => {
      const tr = document.createElement('tr');
      tr.innerHTML = `
        <td>${row.id}</td>
        <td>${row.name}</td>
        <td>${row.category}</td>
        <td>${row.cost.toFixed(2)}</td>
        <td>${row.soldPrice ? row.soldPrice.toFixed(2) : 'N/A'}</td>
        <td>${row.profit ? row.profit.toFixed(2) : 'N/A'}</td>
        <td>${row.vat.toFixed(2)}</td>
        <td>${row.date || 'N/A'}</td>
      `;
      tbody.appendChild(tr);
    });
  } catch (err) {
    console.error('Profit report error:', err);
  }
}

async function fetchTaxReport() {
  try {
    const res = await fetch('/tax-report');
    const data = await res.json();
    document.getElementById('tax-result').innerHTML = `
      <p>Profit: £${(data.profit || 0).toFixed(2)}</p>
      <p>Income Tax: £${(data.incomeTax || 0).toFixed(2)}</p>
      <p>NICs: £${(data.nics || 0).toFixed(2)}</p>
      <p>VAT: £${(data.vat || 0).toFixed(2)}</p>
      <p>Rolling Revenue (last 12 months): £${(data.rollingRevenue || 0).toFixed(2)}</p>
      <p>VAT Status: ${data.vatStatus || 'Unknown'}</p>
    `;
  } catch (err) {
    document.getElementById('tax-result').textContent = `Error: ${err.message}`;
  }
}

document.getElementById('vat-form').addEventListener('submit', async (e) => {
  e.preventDefault();
  const formData = new FormData(e.target);
  const { year, quarter } = Object.fromEntries(formData);

  try {
    const res = await fetch(`/vat-return?year=${year}&quarter=${quarter}`);
    const data = await res.json();
    document.getElementById('vat-result').innerHTML = `
      <p>Year: ${data.year}</p>
      <p>Quarter: Q${data.quarter}</p>
      <p>Period: ${data.period}</p>
      <p>Output VAT: £${data.outputVat.toFixed(2)}</p>
      <p>Input VAT: £${data.inputVat.toFixed(2)}</p>
      <p>Net VAT: £${data.netVat.toFixed(2)}</p>
    `;
  } catch (err) {
    document.getElementById('vat-result').textContent = `Error: ${err.message}`;
  }
});

async function fetchItems() {
  try {
    const tbody = document.querySelector('#items-table tbody');
    if (!tbody) throw new Error('Items table tbody not found in DOM');
    const res = await fetch('/items');
    const data = await res.json();
    tbody.innerHTML = '';
    const categoryAttributes = {
      "Pokémon": { platform: "set", region: "series" },
      "Video Games": { platform: "platform", region: "region" },
      "Comics": { platform: "title", region: "issue" },
      "Football Jerseys": { platform: "team", region: "season" },
      "GAA Jerseys": { platform: "county", region: "year" },
      "Coins": { platform: "denomination", region: "year" },
      "Video Game Consoles": { platform: "model", region: "region" },
      "Electronics": { platform: "type", region: "brand" },
      "Other TCGs": { platform: "game", region: "set" },
      "Sports Cards": { platform: "sport", region: "player" }
    };
    data.forEach((row, index) => {
      const attributes = JSON.parse(row.attributes || '{}');
      const conditionHistory = JSON.parse(row.condition_history || '[]');
      const attrMap = categoryAttributes[row.category] || { platform: "platform", region: "region" };
      const tr = document.createElement('tr');
      tr.dataset.item = JSON.stringify(row); // Store row data for easier access
      tr.innerHTML = `
        <td>${row.id}</td>
        <td>${row.name}</td>
        <td>${row.category}</td>
        <td>${row.value.toFixed(2)}</td>
        <td>${row.cost_price.toFixed(2)}</td>
        <td>${attributes[attrMap.platform] || 'N/A'}</td>
        <td>${attributes[attrMap.region] || 'N/A'}</td>
        <td>${row.condition || 'N/A'}</td>
        <td>${conditionHistory.map(h => `${h.type} (${h.date.slice(0, 10)})`).join(', ') || 'N/A'}</td>
        <td>${(row.input_vat || 0).toFixed(2)}</td>
        <td>${row.status}</td>
        <td>
          <button class="btn btn-sm btn-primary edit-btn" data-index="${index}">Edit</button>
          <button onclick="deleteItem(${row.id})" class="btn btn-sm btn-danger">Delete</button>
        </td>
      `;
      tbody.appendChild(tr);
    });
    // Attach event listeners after DOM insertion
    document.querySelectorAll('.edit-btn').forEach(btn => {
      btn.addEventListener('click', () => {
        const row = JSON.parse(btn.closest('tr').dataset.item);
        const attributes = JSON.parse(row.attributes || '{}');
        const conditionHistory = JSON.parse(row.condition_history || '[]');
        const attrMap = categoryAttributes[row.category] || { platform: "platform", region: "region" };
        editItem(
          row.id,
          row.name,
          row.category,
          row.value,
          row.cost_price,
          attributes[attrMap.platform] || '',
          attributes[attrMap.region] || '',
          row.condition || '',
          JSON.stringify(conditionHistory),
          row.input_vat || 0
        );
      });
    });
  } catch (err) {
    console.error('Items fetch error:', err);
  }
}

function editItem(id, name, category, value, cost_price, platform, region, condition, condition_history, input_vat) {
  console.log('editItem called with:', { id, name, category, value, cost_price, platform, region, condition, condition_history, input_vat });
  const formContainer = document.getElementById('edit-form-container');
  const form = document.getElementById('edit-item-form');
  if (!formContainer || !form) {
    console.error('Edit form elements not found:', { formContainer, form });
    return;
  }
  form.id.value = id;
  form.name.value = name;
  form.category.value = category;
  form.value.value = value;
  form.cost_price.value = cost_price;
  form.platform.value = platform;
  form.region.value = region;
  form.condition.value = condition;
  form.input_vat.value = input_vat;
  form.dataset.conditionHistory = condition_history;
  formContainer.style.display = 'block';
  console.log('Form should now be visible');
}

document.getElementById('edit-item-form').addEventListener('submit', async (e) => {
  e.preventDefault();
  const formData = new FormData(e.target);
  const item = Object.fromEntries(formData);
  const categoryAttributes = {
    "Pokémon": { platform: "set", region: "series" },
    "Video Games": { platform: "platform", region: "region" },
    "Comics": { platform: "title", region: "issue" },
    "Football Jerseys": { platform: "team", region: "season" },
    "GAA Jerseys": { platform: "county", region: "year" },
    "Coins": { platform: "denomination", region: "year" },
    "Video Game Consoles": { platform: "model", region: "region" },
    "Electronics": { platform: "type", region: "brand" },
    "Other TCGs": { platform: "game", region: "set" },
    "Sports Cards": { platform: "sport", region: "player" }
  };
  const attrMap = categoryAttributes[item.category] || { platform: "platform", region: "region" };
  item.attributes = {
    [attrMap.platform]: item.platform,
    [attrMap.region]: item.region
  };
  item.value = parseFloat(item.value);
  item.cost_price = parseFloat(item.cost_price);
  item.input_vat = parseFloat(item.input_vat) || 0;

  const oldConditionHistory = JSON.parse(e.target.dataset.conditionHistory || '[]');
  item.condition_history = oldConditionHistory;
  const lastCondition = oldConditionHistory.length > 0 ? oldConditionHistory[oldConditionHistory.length - 1].type : null;
  if (item.condition !== lastCondition) {
    item.condition_history.push({ type: item.condition, date: new Date().toISOString() });
  }

  delete item.platform;
  delete item.region;

  try {
    const res = await fetch(`/items/${item.id}`, {
      method: 'PUT',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(item)
    });
    const data = await res.json();
    if (res.ok) {
      Swal.fire('Success', `Updated item: ${item.id}`, 'success');
      document.getElementById('edit-form-container').style.display = 'none';
      fetchItems();
    } else {
      Swal.fire('Error', data.error, 'error');
    }
  } catch (err) {
    Swal.fire('Error', err.message, 'error');
  }
});

async function deleteItem(id) {
  const result = await Swal.fire({
    title: 'Are you sure?',
    text: `Delete item ${id}? This cannot be undone.`,
    icon: 'warning',
    showCancelButton: true,
    confirmButtonText: 'Yes, delete it!'
  });

  if (result.isConfirmed) {
    try {
      const res = await fetch(`/items/${id}`, { method: 'DELETE' });
      if (res.ok) {
        Swal.fire('Deleted', `Item ${id} has been deleted`, 'success');
        fetchItems();
      } else {
        const data = await res.json();
        Swal.fire('Error', data.error, 'error');
      }
    } catch (err) {
      Swal.fire('Error', err.message, 'error');
    }
  }
}

